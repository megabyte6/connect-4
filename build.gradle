plugins {
    // Apply the java plugin for better toolchain detection support.
    id 'java'
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    // Apply javafxplugin for JavaFX support.
    id 'org.openjfx.javafxplugin' version '0.1.0'
    // Apply jlink for building the app.
    id 'org.beryx.jlink' version '3.1.4-rc'
    // Apply lombok.
    id 'io.freefair.lombok' version '9.0.0'

    // Current fix for an upstream bug relating to
    // https://github.com/redhat-developer/vscode-java/issues/881
    // for the java extension for vscode.
    id 'eclipse'
}

version = appVersion
def osName = System.getProperty("os.name")

ext {
    // Links for downloading jdks
    jdkLinks = [
        'linux-x64'    : 'https://github.com/adoptium/temurin25-binaries/releases/download/jdk-25%2B36/OpenJDK25U-jdk_x64_linux_hotspot_25_36.tar.gz',
        'macos-aarch64': 'https://github.com/adoptium/temurin25-binaries/releases/download/jdk-25%2B36/OpenJDK25U-jdk_aarch64_mac_hotspot_25_36.tar.gz',
        'macos-x64'    : 'https://github.com/adoptium/temurin25-binaries/releases/download/jdk-25%2B36/OpenJDK25U-jdk_x64_mac_hotspot_25_36.tar.gz',
        'win-x64'      : 'https://github.com/adoptium/temurin25-binaries/releases/download/jdk-25%2B36/OpenJDK25U-jdk_x64_windows_hotspot_25_36.zip'
    ]
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.20.0'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(25)
    }
}

application {
    mainModule = 'com.megabyte6.connect4'
    mainClass = 'com.megabyte6.connect4.App'
}

javafx {
    version = javafxVersion
    modules = ['javafx.controls', 'javafx.fxml']
}

jlink {
    options = [
        '--strip-debug',
        '--compress', '2',
        '--no-header-files',
        '--no-man-pages'
    ]
    launcher {
        noConsole = true
    }
    imageZip = file("$buildDir/connect4.zip")

    if (jlinkTargetPlatform == 'all') {
        // Run all cases.
        jdkLinks.each { key, value ->
            targetPlatform(key) {
                jdkHome = jdkDownload(value)
                addExtraModulePath("jmods/${key.split('-').join('/')}")
            }
        }
    } else {
        targetPlatform(jlinkTargetPlatform) {
            jdkHome = jdkDownload(jdkLinks[jlinkTargetPlatform])
            addExtraModulePath("jmods/${jlinkTargetPlatform.split('-').join('/')}")
        }
    }

    jpackage {
        targetPlatformName = jpackageTargetPlatform
        imageName = 'Connect 4'
        installerName = 'connect4-installer'
        vendor = 'Brayden Chan'

        if (jpackageOutputType != 'default') {
            installerOptions = ["--type $jpackageOutputType"]
        } else {
            installerOptions = []
        }

        if (osName.toLowerCase().indexOf("windows") != -1) {
            icon = 'src/main/resources/icon.ico'
            installerOptions += [
                '--win-dir-chooser',
                '--win-menu',
                '--win-menu-group', 'Connect 4',
                '--win-per-user-install',
                '--win-shortcut',
                '--win-shortcut-prompt',
                '--win-update-url', 'https://github.com/megabyte6/connect-4/releases/latest'
            ]
        } else if (osName.toLowerCase().indexOf("linux") != -1) {
            installerOptions += [
                '--linux-package-name', 'Connect 4',
                '--linux-menu-group', 'Connect 4',
                '--linux-shortcut'
            ]
        } else {
            icon = 'src/main/resources/icon.png'
        }
    }
}

// Current fix for an upstream bug relating to
// https://github.com/redhat-developer/vscode-java/issues/881
// for the java extension for vscode.
eclipse {
    classpath {
        containers 'org.eclipse.buildship.core.gradleclasspathcontainer'
        file {
            whenMerged {
                entries.findAll { it.properties.kind.equals('lib') && !it.properties.path.contains("junit") }.each {
                    it.entryAttributes['module'] = 'true'
                }
            }
        }
    }
}
